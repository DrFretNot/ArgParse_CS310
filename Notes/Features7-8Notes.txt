Feature 7:

NamedArgument constructors can now take a char as an optional short form name. I added this method.

private void setShortFormNamedArgValues(String[] args){

-->goes through the args from CLI

		for(int i = 0; i < args.length; i++){
			String[] tempNamedArg = new String[2];
			
-->checks if any arg starts with "-" and splits it into an array with "-" in position 0 and the rest in position 1

			if(args[i].startsWith("-")){
				tempNamedArg = args[i].split("-");
				
-->goes through named arguments

				for(int k = 0; k < namedArgumentList.size(); k++){
					NamedArgument currentNamedArg = namedArgumentList.get(k);

-->if it's a char after the "-" it checks if that named arguments is a boolean or not and sets the value accordingly

					if(tempNamedArg[1].length() == 1){ //single char
						if(Character.toString(currentNamedArg.getShortFormName()).equals(tempNamedArg[1])){
							if(!currentNamedArg.getType().equals("boolean")){
								currentNamedArg.setValue(args[i+1]);
							}
							else{
								currentNamedArg.setValue("true");
							}
						}
					}
					
-->if multiple characters follow the "-" then the must be booleans, so it sets the values for each named argument to true

					else{ //multiple flags in one specification
						for(int j = 0; j < tempNamedArg[1].length(); j++){
							if(currentNamedArg.getShortFormName() == tempNamedArg[1].charAt(j)){
								currentNamedArg.setValue("true");
							}
						}
					}
				}
			}
		}
	}
	
I also adjusted the method getPositionalArgs to pull out positional args when given short form named arguments as well as long forms.

private ArrayList<String> getPositionalArgs(String[] args){
    	ArrayList<String> posArgList = new ArrayList<String>(); 
    	for(int i = 0; i < args.length; i++){ //going through args from CLI
    		if(!args[i].startsWith("-") && i == 0){ //test if the first arg is a positional arg
    			posArgList.add(args[i]);
    		}
    		else if(!args[i].startsWith("-")){ //arg from CLI doesn't have a dash
    			if(!args[i-1].startsWith("-")){ //if the one before it doesn't have a dash, then it's a pos arg
    				posArgList.add(args[i]);
    			}
    			else{ //the arg before it has a dash
    				String[] tempNamedArg = new String[2];
    				if(args[i-1].startsWith("--")){ //arg before it is in long form
    					tempNamedArg = args[i-1].split("--");
    					for(int j = 0; j < namedArgumentList.size(); j++){ //go through all named args
    						NamedArgument currentNamedArg = namedArgumentList.get(j);
    						if(currentNamedArg.getName().equals(tempNamedArg[1])) {
								if(currentNamedArg.getType().equals("boolean")){ //if long form arg is boolean, still need to add arg after to pos args
									posArgList.add(args[i]);
								}
							}
    					}
    				}
    				else{ //arg before it is in short form
    					tempNamedArg = args[i-1].split("-");
						if(tempNamedArg[1].length() == 1){ //single char
							for(int j = 0; j < namedArgumentList.size(); j++){ //go through all named args
								NamedArgument currentNamedArg = namedArgumentList.get(j);
								if(Character.toString(currentNamedArg.getShortFormName()).equals(tempNamedArg[1])) {
									if(currentNamedArg.getType().equals("boolean")){ //if short form arg is boolean, still need to add arg after to pos args
										posArgList.add(args[i]);
									}
								}
							}
						}
						else{ //multiple flags in one specification, must be boolean so add arg after it to pos args
							posArgList.add(args[i]);
						}
    				}
    			}
    		}
    	}
    	return posArgList;
    }
    
Feature 8:

We already had exceptions for the help message, wrong number of positional arguments, and  incorrect data types for positional
arguments. I added the ArgumentDoesNotExistException and this method to throw it.

String invalidNamedArgument = ""; //used in invalidNamedArgument and argumentDoesNotExistMessage
	
-->This method checks if the named arguments given in the command line are actual arguments that the product owner has declared.
   If there is a named argument (short.long form) called that has not been declared by the product owner, an exception is thrown
   with the message that is build in the method argumentDoesNotExistMessage. invalidNamedArgument is called in parse, so parse 
   throws ArgumentDoesNotExistException.
   
	private void invalidNamedArgument(String[] args) throws ArgumentDoesNotExistException{
		for(int i = 0; i < args.length; i++){
			if(args[i].startsWith("--")){
				String[] splitLongNamedArg = new String[2];
				splitLongNamedArg = args[i].split("--");
				NamedArgument tempArg = getNamedArgument(splitLongNamedArg[1]);
				if(tempArg == null){
					invalidNamedArgument = splitLongNamedArg[1];
					throw new ArgumentDoesNotExistException(argumentDoesNotExistMessage(invalidNamedArgument));
				}
			}
			else if(args[i].startsWith("-")){
				String[] splitShortNamedArg = new String[2];
				splitShortNamedArg = args[i].split("-");
				if(splitShortNamedArg[1].length() == 1){ //single char
					NamedArgument tempArg = getNamedArgument(splitShortNamedArg[1].charAt(0));
					if(tempArg == null){
						invalidNamedArgument = splitShortNamedArg[1];
						throw new ArgumentDoesNotExistException(argumentDoesNotExistMessage(invalidNamedArgument));
					}
				}
				else{ //multiple flags in one specification
					for(int k = 0; k < splitShortNamedArg[1].length(); k++){
						NamedArgument tempArg = getNamedArgument(splitShortNamedArg[1].charAt(k));
						if(tempArg == null){
							invalidNamedArgument = Character.toString(splitShortNamedArg[1].charAt(k));
							throw new ArgumentDoesNotExistException(argumentDoesNotExistMessage(invalidNamedArgument));
						}
					}
				}
			}
		}
	}
	
	private String argumentDoesNotExistMessage(String invalidNamedArgument){
		String message = "usage: java " + programName;
		for(int i = 0; i < argumentList.size(); i++) {
			Argument currentArg = argumentList.get(i);
            message += " " + currentArg.getName();   
        }
        
        message += "\n" + programName + ".java: error: argument " + invalidNamedArgument + " does not exist";
        
        /*for(int i = 0; i < args.length; i++){
        	if(args[i].startsWith("--")){
        		String[] splitLongNamedArg = new String[2];
        		splitLongNamedArg = args[i].split("--");
        		NamedArgument tempArg = getNamedArgument(splitLongNamedArg[1]);
        		if(tempArg == null){
        			message += " " + splitLongNamedArg[1];
        		}
        	}
        	else if(args[i].startsWith("-")){
        		String[] splitShortNamedArg = new String[2];
        		splitShortNamedArg = args[i].split("-");
        		if(splitShortNamedArg[1].length() == 1){ //single char
					NamedArgument tempArg = getNamedArgument(splitShortNamedArg[1]);
					if(tempArg == null){
						message += " " + splitShortNamedArg[1];
					}
				}
				else{ //multiple flags in one specification
					for(int k = 0; k < splitShortNamedArg[1].length(); k++){
						NamedArgument tempArg = getNamedArgument(splitShortNamedArg[1].charAt(k));
						if(tempArg == null){
							message += " " + splitShortNamedArg[1].charAt(k);
						}
					}
				}
        	}
        }
        
        message += " does/do not exist";*/
        
    	return message;
	}
	
	
I also added a way to get the NamedArgument by searching with the short form name.

public NamedArgument getNamedArgument(char argShortFormName){
    	NamedArgument returnArg = null;
    	for(int i = 0; i < namedArgumentList.size(); i++){
    		NamedArgument currentArg = namedArgumentList.get(i);
    		if(currentArg.getShortFormName() == argShortFormName){
    			returnArg = currentArg;
    		}
    	}
    	return returnArg;
    }